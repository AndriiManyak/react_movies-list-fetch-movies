{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/shapes/MovieShape.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","request","PropTypes","string","isRequired","url","a","fetch","response","json","getFilm","FindMovie","addMovie","useState","serchTitle","setSerchTitle","setMovie","movieError","setMovieError","loading","setLoading","findFilm","useCallback","requestedMovie","Response","Title","Plot","Poster","imdbID","onAdd","find","movieFromList","htmlFor","type","id","placeholder","classNames","value","onChange","event","target","onClick","role","App","data","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.621b07de.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=892b42fa';\n\nconst request = async(url) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n};\n\nexport const getFilm = title => request(`&t=${title}`);\n","import PropTypes from 'prop-types';\n\nexport const MovieShape = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { MovieShape } from '../shapes/MovieShape';\nimport { getFilm } from '../../api/api';\n\nexport const FindMovie = ({ addMovie, movies }) => {\n  const [serchTitle, setSerchTitle] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [movieError, setMovieError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const findFilm = useCallback(async() => {\n    setLoading(true);\n    const requestedMovie = await getFilm(serchTitle);\n\n    if (requestedMovie.Response === 'False') {\n      setMovieError(`Can't find a movie with such a title`);\n      setLoading(false);\n\n      return;\n    }\n\n    const {\n      Title: title,\n      Plot: description,\n      Poster: imgUrl,\n      imdbID: imdbId,\n    } = requestedMovie;\n\n    const imdbUrl = `https://www.imdb.com/title/${imdbId}`;\n\n    setMovie({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setMovieError('');\n    setLoading(false);\n  }, [serchTitle]);\n\n  const handleChange = (event) => {\n    setSerchTitle(event.target.value);\n    setMovieError('');\n  };\n\n  const onAdd = useCallback(() => {\n    if (!movie) {\n      setMovieError('Movie not selected');\n\n      return;\n    }\n\n    const isMovieAlreadyExist = movies.find(movieFromList => (\n      movieFromList.imdbId === movie.imdbId\n    ));\n\n    if (isMovieAlreadyExist) {\n      setMovieError('Movie already exist');\n\n      return;\n    }\n\n    addMovie(movie);\n    setMovie(null);\n    setSerchTitle('');\n  }, [movie]);\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={\n                classNames(\n                  'input',\n                  { 'is-danger': movieError },\n                )\n              }\n              value={serchTitle}\n              onChange={handleChange}\n            />\n          </div>\n          {\n            movieError\n            && (\n              <p className=\"help is-danger\">\n                {movieError}\n              </p>\n            )\n          }\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findFilm}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={onAdd}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {\n          loading\n          && (\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          )\n        }\n        {\n          (!loading && movie) && (<MovieCard {...movie} />)\n        }\n        {\n          (!loading && movie) && (<p>Film not selected</p>)\n        }\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape(MovieShape),\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovieToList = (movie) => {\n    setMovies(prevMovies => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovieToList}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}